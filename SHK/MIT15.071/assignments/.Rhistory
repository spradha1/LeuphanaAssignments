sd(c(5,8, 12))
Sys.setlocale("LC_ALL", "C")
3^5
2*9
3+
4
4*
2*
1
3^
4
cls
sqrt(9)
abs(-7)
?sqrt
sqrt(c(1, 9))
r <- 5*9
r
ls()
r = 9
ls()
fa = 9*sqrt(3)
fa
ls()
c(9, 5)
countries = c('Nepal', 'Iran', 'Taiwan')
countries
pops = c(30, 80, 220)
pops
countries[2]
countries[0]
countries[3]
seq(0, 100)
seq(countries)
df = data.frame(countries, pops)
df
df$capitals = c('Ktm', 'Teh', 'Tai')
df
df1 = data.frame(c('India', 'Vietnam'), c(1000, 88), c('Del', 'Han'))
df1
colnames(df1) <- c('countries', 'pops', 'capitals')
df1 = data.frame(c('India', 'Vietnam'), c(1000, 88), c('Del', 'Han'))
df1
colnames(df1) <- c('countries', 'pops', 'capitals')
df1
df2 = rbind(df, df1)
df2
getwd()
who = read.csv('who.csv')
who = read.csv('who.csv')
getwd()
setwd("~/Documents/Leuphana/LeuphanaStuff/SHK/MIT15.071/lectures")
quality = read.csv('datasets/quality.csv')
str(quality)
library('zoo')
install.packages("caTools")
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
split
str(quality$PoorCare)
quality_tr = subset(quality, split = TRUE)
quality_ts = subset(quality, split = FALSE)
nrow(quality_tr)
nrow(quality_ts)
quality_ts = subset(quality, split == FALSE)
quality_tr = subset(quality, split == TRUE)
nrow(quality_tr)
nrow(quality_ts)
model1 = glm(PoorCare ~ OfficeVisits + Narcotics, data=quality_tr, family=binomial)
summary(model1)
preds1 = predict(model1, type='response')
summary(preds1)
tapply(preds1, quality_tr$PoorCare, mean)
?glm
?predict
model2 = glm(PoorCare ~ StartedOnCombination + ProviderCount, data=quality_tr, family=binomial)
summary(model2)
table(quality_tr$PoorCare, preds1 > 0.5)
summary(preds1)
table(quality_tr$PoorCare, preds1 > 0.7)
install.packages('ROCR')
library('ROCR')
library(ROCR)
preds3 = prediction(preds1, quality-TR$PoorCare)
preds3 = prediction(preds1, quality_tr$PoorCare)
perf3 = performance(preds3, "tpr", "fpr")
plot(perf3)
perf3
plot(perf3, colorize=TRUE)
plot(perf3, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1))
plot(perf3, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=c(-0.2,1.7))
plot(perf3, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1))
plot(perf3, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=c(-0.2,1.7))
s = seq(1, 9, 0.5)
s
preds3
str(preds3)
str(preds1)
?prediction
?performance
str(perf3)
summary(model1)
preds1_test = predict(model1, type='response', data=quality_ts)
table(quality_ts$PoorCare, preds1_test > 0,5)
table(quality_ts$PoorCare, preds1_test > 0.5)
summary(preds1_test)
nrow(preds1_test)
nrow(preds1)
preds1_test = predict(model1, type='response', newdata=quality_ts)
nrow(preds1_test)
table(quality_ts$PoorCare, preds1_test > 0.5)
preds4_test = predictions(preds1_test, quality_ts$PoorCare)
preds4_test = prediction(preds1_test, quality_ts$PoorCare)
perf4_test = performance(preds$_test, 'tpr', 'fpr')
perf4_test = performance(preds4_test, 'tpr', 'fpr')
plot(perf4_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=(-0.5, 1.5))
plot(perf4_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=c(-0.5, 1.5))
plot(perf4_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=c(-1, 1.5))
plot(perf4_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=c(-1, 2.5))
plot(perf4_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=c(-0.1, 2.5))
auc = as.numeric(performance(preds4_test, 'auc')@y.values)
auc
performance(preds4_test, 'auc')@y.values
as.numeric(performance(preds4_test, 'auc')@y.values)
class(auc)
class(performance(preds4_test, 'auc')@y.values)
class(performance(preds4_test, 'auc'))
?performance
rm(list=ls())
fram = read.csv('datasets/framingham.csv')
jpeg('plots/ROCcurve.jpeg')
dev.off()
getwd()
quality = read.csv('datasets/quality.csv')
library('ROCR')
model1 = glm(PoorCare ~ OfficeVisits + Narcotics, data=quality_tr, family=binomial)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
quality_tr = subset(quality, split = TRUE)
quality_ts = subset(quality, split = FALSE)
model1 = glm(PoorCare ~ OfficeVisits + Narcotics, data=quality_tr, family=binomial)
preds1_test = predict(model1, type='response', newdata=quality_ts)
predictions1_test = prediction(preds1_test, quality_ts$PoorCare)
perf1_test = performance(predictions1_test, 'tpr', 'fpr')
plot(perf1_test)
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.5, 0.5))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.5, 0.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.5, 1))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.9, 0.5))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.7, 0.5))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.2, 0.5))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.4, 0.5))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.4, 0.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.4, 0.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.9, 1.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.9, 0.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.5, 0.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.4, 0.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.45, 0.9))
jpeg('plots/ROCcurve.jpeg')
dev.off()
setwd("~/Documents/Leuphana/LeuphanaStuff/SHK/MIT15.071/lectures")
jpeg('plots/ROCcurve.jpeg')
?dev.copy
dev.copy()
jpeg('plots/ROCcurve.jpeg')
dev.off()
jpeg('plots/ROCcurve.jpeg')
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.45, 0.9))
dev.off()
jpeg('plots/ROCcurve1.jpeg')
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.45, 0.9))
plot(perf1_test, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.2), text.adj=c(-0.5, 0.9))
dev.off()
rm(list=ls())
fram = read.csv('datasets/framingham.csv')
str(fram)
library(caTools)
set.seed(1000)
split = sample.split(fram$TenYearCHD, SplitR)
split = sample.split(fram$TenYearCHD, SplitRatio = 0.65)
train_fram = subset(fram, split == TRUE)
test_fram = subset(fram, split == FALSE)
model1 = glm(TenYearCHD ~ ., data=train_fram, family=binomial)
summary(model1)
preds_test1 = predict(model1, tyoe='response', newdata=test_fram)
table(test_fram$TenYearCHD, preds_test1 > 0.5)
preds_test1 = predict(model1, type='response', newdata=test_fram)
table(test_fram$TenYearCHD, preds_test1 > 0.5)
?predict
preds_test1[:10]
preds_test1
preds_test1 = predict(model1, newdata=test_fram)
preds_test1
preds_test1 = predict(model1, type='response', newdata=test_fram)
table(test_fram$TenYearCHD, preds_test1 > 0.5)
library(ROCR)
ROCRpreds1 = prediction(preds_test1, test_fram$TenYearCHD)
ROCRpreds1 = prediction(preds_test1, test_fram$TenYearCHD, na.rm=TRUE)
summary(preds_test1)
summary(test_fram\)
summary(test_fram)
summary(test_fram$TenYearCHD)
summary(model1)
preds_test1 = predict(model1, type='response', newdata=test_fram)
table(test_fram$TenYearCHD, preds_test1 > 0.5)
ROCRpreds1 = prediction(preds_test1, test_fram$TenYearCHD, na.rm=TRUE)
ROCRpreds1 = prediction(preds_test1, test_fram$TenYearCHD)
nrow(test_fram)
train_fram = na.omit(train_fram)
nrow(train_fram)
test_fram = na.omit(test_fram)
nrow(test_fram)
model1 = glm(TenYearCHD ~ ., data=train_fram, family=binomial)
summary(model1)
preds_test1 = predict(model1, type='response', newdata=test_fram)
summary(preds_test1)
ROCRpreds1 = prediction(preds_test1, test_fram$TenYearCHD)
as.numeric(performance(ROCRpreds1, 'auc')@y.values)
?performance
11/198
6/1075
1069/1075
rm(list=ls())
poll = read.csv('datasets/PollingData.csv')
str(poll)
table(poll$Year)
table(poll$State)
summary(polling)
summary(poll)
nrow(subset(poll, SurveyUSA == NA))
nrow(subset(poll, SurveyUSA == na))
nrow(subset(poll, SurveyUSA == NaN))
nrow(subset(poll, SurveyUSA.isna()))
nrow(subset(poll, SurveyUSA.is.na()))
nrow(subset(poll, is.na(SurveyUSA)))
install.packages('mice')
library(mice)
install.packages('mice')
install.packages('mice')
install.packages ("stringi", type = "win.binary")
install.packages("mice")
library(mice)
poll1 = poll[c('Rasmussen', 'SurveyUSA', 'PropR', 'DiffCount')]
str(poll)
summary(poll1)
imputePoll1 = complete(mice(poll1))
summary(imputePoll1)
poll$Rasmussen = imputePoll1$Rasmussen
poll$SurveyUSA = imputePoll1$SurveyUSA
summary(poll)
train_poll = subset(poll, Year < 2012)
test_poll = subset(poll, Year == 2012)
table(train_poll$Republican)
sign(32)
split = sample.split(poll$Year, SplitRatio = 0.7)
trdemo = subset(poll, split==TRUE)
summary(trdemo$Year)
table(poll$Year)
table(trdemo$Year)
rm(c(trdemo, split))
rm(trdemo)
rm(split)
table(sign(train_poll$Rasmussen), train_poll$Republican)
summary(train_poll$Republican)
table(train_poll$Republican)
cor(train_poll)
cor(train_poll[c('Rasmussen', 'SurveyUSA', 'PropR', 'DiffCount', 'Republican')])
mod1 = glm(Republican ~ PropR, data=train_poll, family = binomial)
summary(mod1)
pred1 = predict(mod1, newdata = test_poll)
pred1 = predict(mod1, type='response')
table(train_poll$Republican, pred1 >= 0.5)
mod2 = glm(Republican ~ SurveyUSA + DiffCount, data=train_poll, family = binomial)
summary(mod2)
pred2 = predict(mod2, type='response')
table(train_poll$Republican, pred2 >= 0.5)
mod2 = glm(Republican ~ SurveyUSA + DiffCount, data=train_poll, family = 'binomial')
pred2 = predict(mod2, type='response')
table(train_poll$Republican, pred2 >= 0.5)
summary(mod2)
table(test_poll$Republican, sign(test_poll$Rasmussen))
38/45
pred2 = predict(mod2, type='response', newdata=test_poll)
table(test_poll$Republican, pred2 >= 0.5)
subset(test_poll, pred2 >= 0.5 & Republican == 0)
subset(test_poll, pred2 < 0.5 & Republican == 1)
plot(poll$Rasmussen, poll$SurveyUSA)
plot(poll$Rasmussen, poll$SurveyUSA, col="blue")
boxplot(poll$Rasmussen ~ poll$Year, col="blue")
hist(poll$DiffCount, col="green")
lines(poll$Rasmussen, poll$SurveyUSA, type="l", col="blue")
lines(seq(0, 10, 1), seq(25, 5, 2), type="l", col="blue")
lines(seq(0, 10, 1), seq(25, 5, -2), type="l", col="blue")
plot()
dev.off(dev.list()["RStudioGD"])
lines(seq(0, 10, 1), seq(25, 5, -2), type="l", col="blue")
plot(poll$Rasmussen, poll$Year, col="blue", type='l', lty=6)
plot(poll$Rasmussen, poll$Year, col="blue", type='l', lty=6)
plot(poll$Rasmussen, poll$SurveyUSA, col="blue")
plot(poll$Rasmussen, poll$SurveyUSA, col="blue")
dev()
dev.off()
plot(poll$Rasmussen, poll$SurveyUSA, col="blue")
plot(poll$Rasmussen, poll$Year, col="blue", type='l', lty=6)
plot(poll$Year, poll$SurveyUSA, col="blue", type='l', lty=5)
plot(poll$Year, poll$SurveyUSA, col="gold", type='l', lty=5)
plot(poll$Year, poll$SurveyUSA, col="gold", type='b', lty=5)
plot(poll$Year, poll$SurveyUSA, col="magenta", type='b', lty=5)
setwd("~/Documents/Leuphana/LeuphanaStuff/SHK/MIT15.071/assignments")
rm(list=ls())
songs = read.csv('datasets/songs.csv')
str(songs)
table(songs$artistname)
which(songs, artistname == 'Michael Jackson')
?which
which(songs$artistname == 'Michael Jackson')
length(which(songs$artistname == 'Michael Jackson'))
library(dplyr)
songs %>% filter(artistname == 'Michael Jackson') %>% summarize(count = n())
length(which(songs$artistname %in% c('Michael Jackson', 'Webbie'))
)
train_songs = songs %>% filter(year <= 2009)
summary(train_songs$year)
table(train_songs$year)
train_songs = subset(songs, year <= 2009)
table(train_songs$year)
test_songs = subset(songs, year == 2010)
table(test_songs$year)
str(songs)
exclude_vars = c('year', 'songtitle', 'artistname', 'songID', 'artistID')
train_songs = train_songs[, !names(train_songs) %in% exclude_vars]
test_songs = test_songs[, !names(test_songs) %in% exclude_vars]
names(train_songs) == names(test_songs)
names(train_songs)
mod1 = glm(Top10 ~ ., data=train_songs, family='binomial')
summary(mod1)
pred1 = predict(mod1, type='response', newdata=test_songs)
?group_by
table(test_songs$Top10, pred1 >= 0.5)
322/(373)
table(test_songs$Top10, pred1 >= 0.45)
324/373
table(test_songs$Top10)
314/373
tpr = 15/59
tpr
rm(tpr)
5/314
rm(list=ls())
setwd("~/Documents/Leuphana/LeuphanaStuff/SHK/MIT15.071/lectures")
bb = read.csv('datasets/baseball.csv')
setwd("~/Documents/Leuphana/LeuphanaStuff/SHK/MIT15.071/assignments")
str(bb)
length(table(bb$Year))
po = subset(bb, Playoffs == 1)
nrow(table(po$Team))
table(po$Team, po$Year))
table(po$Team, po$Year)
table(po$Year)
max(table(po$Year))
NumCompetitors = table(po$Year)
names(NumCompetitors)
NumCompetitors(1990, 2001)
NumCompetitors[c('1990', '2001')]
po$NumCompetitors = NumCompetitors[as.character(po$Year)]
table(po$NumCompetitors)
table(NumCompetitors)
?as.character
po$winner = as.numeric(po$RankPlayoffs == 1)
table(po$winner)
mod = glm(winner ~ Year, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ RS, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ RA, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ W, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ OBP, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ SLG, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ BA, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ RankSeason, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ OOBP, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ OS;G, data=po, family=binomial)
mod = glm(winner ~ OSLG, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ NumCompetitors, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ League, data=po, family=binomial)
summary(mod)
mod1 = glm(winner ~ NumCompetitors + RA + RankSeason + Year, data=po, family=binomial)
summary(mod1)
cor(po[c('Year', 'RA', 'RankSeason', 'NumCompetitors')])
mod = glm(winner ~ NumCompetitors, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ NumCompetitors + RA, data=po, family=binomial)
summary(mod)
mod = glm(winner ~ RankSeason + RA, data=po, family=binomial)
summary(mod)
